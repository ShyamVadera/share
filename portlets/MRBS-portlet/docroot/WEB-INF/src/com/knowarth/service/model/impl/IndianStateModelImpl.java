/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.knowarth.service.model.impl;

import com.knowarth.service.model.IndianState;
import com.knowarth.service.model.IndianStateModel;
import com.knowarth.service.model.IndianStateSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IndianState service. Represents a row in the &quot;IndianState&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.knowarth.service.model.IndianStateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IndianStateImpl}.
 * </p>
 *
 * @author shyam.vadera
 * @see IndianStateImpl
 * @see com.knowarth.service.model.IndianState
 * @see com.knowarth.service.model.IndianStateModel
 * @generated
 */
@JSON(strict = true)
public class IndianStateModelImpl extends BaseModelImpl<IndianState>
	implements IndianStateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a indian state model instance should use the {@link com.knowarth.service.model.IndianState} interface instead.
	 */
	public static final String TABLE_NAME = "IndianState";
	public static final Object[][] TABLE_COLUMNS = {
			{ "stateId", Types.BIGINT },
			{ "stateName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table IndianState (stateId LONG not null primary key,stateName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table IndianState";
	public static final String ORDER_BY_JPQL = " ORDER BY indianState.stateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY IndianState.stateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.knowarth.service.model.IndianState"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.knowarth.service.model.IndianState"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IndianState toModel(IndianStateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IndianState model = new IndianStateImpl();

		model.setStateId(soapModel.getStateId());
		model.setStateName(soapModel.getStateName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IndianState> toModels(IndianStateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IndianState> models = new ArrayList<IndianState>(soapModels.length);

		for (IndianStateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.knowarth.service.model.IndianState"));

	public IndianStateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IndianState.class;
	}

	@Override
	public String getModelClassName() {
		return IndianState.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("stateId", getStateId());
		attributes.put("stateName", getStateName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long stateId = (Long)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		String stateName = (String)attributes.get("stateName");

		if (stateName != null) {
			setStateName(stateName);
		}
	}

	@JSON
	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public String getStateName() {
		if (_stateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateName;
		}
	}

	@Override
	public void setStateName(String stateName) {
		_stateName = stateName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			IndianState.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IndianState toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IndianState)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IndianStateImpl indianStateImpl = new IndianStateImpl();

		indianStateImpl.setStateId(getStateId());
		indianStateImpl.setStateName(getStateName());

		indianStateImpl.resetOriginalValues();

		return indianStateImpl;
	}

	@Override
	public int compareTo(IndianState indianState) {
		long primaryKey = indianState.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IndianState)) {
			return false;
		}

		IndianState indianState = (IndianState)obj;

		long primaryKey = indianState.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<IndianState> toCacheModel() {
		IndianStateCacheModel indianStateCacheModel = new IndianStateCacheModel();

		indianStateCacheModel.stateId = getStateId();

		indianStateCacheModel.stateName = getStateName();

		String stateName = indianStateCacheModel.stateName;

		if ((stateName != null) && (stateName.length() == 0)) {
			indianStateCacheModel.stateName = null;
		}

		return indianStateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{stateId=");
		sb.append(getStateId());
		sb.append(", stateName=");
		sb.append(getStateName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.knowarth.service.model.IndianState");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateName</column-name><column-value><![CDATA[");
		sb.append(getStateName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IndianState.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			IndianState.class
		};
	private long _stateId;
	private String _stateName;
	private IndianState _escapedModel;
}